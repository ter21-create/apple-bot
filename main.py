# -*- coding: utf-8 -*-
# Telegram-–±–æ—Ç –¥–ª—è –≤—ã–∫—É–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏ Apple
# –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook (Render/Railway)
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python 3.8+, pyTelegramBotAPI, Flask
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install pyTelegramBotAPI Flask

import os
import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputMediaPhoto
from flask import Flask, request

# ======================== –ù–ê–°–¢–†–û–ô–ö–ò ========================
TOKEN = os.getenv("TG_TOKEN", "7618321225:AAGSxJVnjX1snonDMQNeK3lPJsB1AI5q9gg")
ADMIN_ID = int(os.getenv("ADMIN_ID", "119780466"))
WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "")  # https://your-app.onrender.com
BOT_NAME = "Apple Buyout Bot"
PORT = int(os.getenv("PORT", 5000))
# ===========================================================

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")
app = Flask(__name__)

# ======================== –î–ê–ù–ù–´–ï ========================
DEVICE_TYPES = [
    "üì± iPhone", "üíª Mac", "üì≤ iPad",
    "‚åö Apple Watch", "üéß AirPods", "üï∂Ô∏è Vision Pro",
    "üîå–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üì¶ –î—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
]

CONDITIONS = [
    "‚ú® –ù–æ–≤—ã–π", "üíé –ò–¥–µ–∞–ª—å–Ω–æ–µ (–±–µ–∑ —Ü–∞—Ä–∞–ø–∏–Ω)",
    "üôÇ –•–æ—Ä–æ—à–µ–µ (–µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–µ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)",
    "üòï –ï—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã/—Å–∫–æ–ª—ã", "üí• –ï—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è/–±–∏—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–ø—É—Å–∞"
]

CONTACT_METHODS = [
    "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è", "WhatsApp üì≤", "Telegram @username"
]

BTN_SKIP = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è"
BTN_DONE = "–ì–æ—Ç–æ–≤–æ ‚û°Ô∏è"
BTN_CANCEL = "–û—Ç–º–µ–Ω–∞ ‚ùå"
MAX_PHOTOS = 3

STATES = {
    "DEVICE": "DEVICE",
    "CONDITION": "CONDITION",
    "SPECS": "SPECS",
    "KIT": "KIT",
    "FAULTS": "FAULTS",
    "PHOTOS": "PHOTOS",
    "CONTACT_METHOD": "CONTACT_METHOD",
    "CONTACT": "CONTACT",
    "DONE": "DONE",
}

users = {}

# ======================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========================

def get_kb(options, row_width=2, add_cancel=True, extra_buttons=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=row_width)
    buttons = [KeyboardButton(o) for o in options]
    if extra_buttons:
        buttons += [KeyboardButton(o) for o in extra_buttons]
    if add_cancel:
        buttons.append(KeyboardButton(BTN_CANCEL))
    kb.add(*buttons)
    return kb

def reset_user(chat_id):
    users[chat_id] = {
        "state": STATES["DEVICE"],
        "device": None, "condition": None, "specs": None,
        "kit": None, "faults": None, "photos": [],
        "contact_method": None, "contact": None,
        "username": None, "name": None, "phone": None,
    }

def summary_text(chat_id):
    d = users[chat_id]
    photos_info = f"{len(d['photos'])} —à—Ç." if d["photos"] else "–Ω–µ—Ç"
    contact_info = d["contact"] or (f"{d['name'] or ''} {d['phone'] or ''}".strip() or f"@{d.get('username', '')}")
    text = (
        f"<b>üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∫—É–ø</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üì¶ <b>–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {d['device'] or '‚Äî'}\n"
        f"üßø <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {d['condition'] or '‚Äî'}\n"
        f"üßæ <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n{d['specs'] or '‚Äî'}\n"
        f"üìö <b>–ö–æ–º–ø–ª–µ–∫—Ç:</b>\n{d['kit'] or '‚Äî'}\n"
        f"‚ö†Ô∏è <b>–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏:</b>\n{d['faults'] or '‚Äî'}\n"
        f"üñºÔ∏è <b>–§–æ—Ç–æ:</b> {photos_info}\n"
        f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n{contact_info}"
    )
    return text

# ======================== –í–û–ü–†–û–°–´ ========================

def ask_device(chat_id):
    bot.send_message(chat_id,
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –≤–∞—à—É —Ç–µ—Ö–Ω–∏–∫—É Apple –±—ã—Å—Ç—Ä–æ –∏ –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å üì¶:",
        reply_markup=get_kb(DEVICE_TYPES, row_width=2))
    users[chat_id]["state"] = STATES["DEVICE"]

def ask_condition(chat_id):
    bot.send_message(chat_id,
        "–£—Ç–æ—á–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=get_kb(CONDITIONS, row_width=1, extra_buttons=[BTN_SKIP]))
    users[chat_id]["state"] = STATES["CONDITION"]

def ask_specs(chat_id):
    bot.send_message(chat_id,
        "–û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∑–Ω–∞–µ—Ç–µ. –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:\n"
        "(–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –ø–∞–º—è—Ç—å, –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä (—Ü–∏–∫–ª—ã –∏ %), —Ü–≤–µ—Ç –∏ —Ç.–¥.)",
        reply_markup=get_kb([BTN_SKIP], row_width=1))
    users[chat_id]["state"] = STATES["SPECS"]

def ask_kit(chat_id):
    bot.send_message(chat_id,
        "–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç üì¶\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Ä–æ–±–∫–∞, –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á–µ–∫",
        reply_markup=get_kb([BTN_SKIP], row_width=1))
    users[chat_id]["state"] = STATES["KIT"]

def ask_faults(chat_id):
    bot.send_message(chat_id,
        "–ï—Å—Ç—å –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏? ‚ö†Ô∏è\n–û–ø–∏—à–∏—Ç–µ –∏—Ö –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è.",
        reply_markup=get_kb([BTN_SKIP], row_width=1))
    users[chat_id]["state"] = STATES["FAULTS"]

def ask_photos(chat_id):
    bot.send_message(chat_id,
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ 1‚Äì3 —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üñºÔ∏è. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ ‚û°Ô∏è¬ª.",
        reply_markup=get_kb([BTN_DONE, BTN_SKIP], row_width=2))
    users[chat_id]["state"] = STATES["PHOTOS"]

def ask_contact_method(chat_id):
    bot.send_message(chat_id,
        "–ö–∞–∫ —Å –≤–∞–º–∏ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è? üì±",
        reply_markup=get_kb(CONTACT_METHODS + [BTN_SKIP], row_width=1))
    users[chat_id]["state"] = STATES["CONTACT_METHOD"]

def ask_contact(chat_id):
    method = users[chat_id]["contact_method"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    if method == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è":
        kb.add(KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è", request_contact=True))
    elif method == "WhatsApp üì≤":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –≤ WhatsApp (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789)")
    elif method == "Telegram @username":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram @username")
    kb.add(KeyboardButton(BTN_SKIP), KeyboardButton(BTN_CANCEL))
    if method != "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è":
        users[chat_id]["state"] = STATES["CONTACT"]
    else:
        users[chat_id]["state"] = STATES["CONTACT"]
        bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ /start, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=kb)

def finish_and_send(chat_id):
    text = summary_text(chat_id)
    bot.send_message(ADMIN_ID, text)

    photos = users[chat_id]["photos"]
    if photos:
        media = [InputMediaPhoto(pid) for pid in photos[:MAX_PHOTOS]]
        try:
            bot.send_media_group(ADMIN_ID, media)
        except:
            for pid in photos[:MAX_PHOTOS]:
                bot.send_photo(ADMIN_ID, pid)

    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                     reply_markup=ReplyKeyboardRemove())
    users[chat_id]["state"] = STATES["DONE"]

# ======================== –•–≠–ù–î–õ–ï–†–´ ========================

@bot.message_handler(commands=["start", "help"])
def cmd_start(message):
    chat_id = message.chat.id
    users.setdefault(chat_id, {})
    reset_user(chat_id)
    users[chat_id]["username"] = message.from_user.username
    ask_device(chat_id)

@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    chat_id = message.chat.id
    if chat_id not in users: reset_user(chat_id)
    if users[chat_id].get("state") != STATES["CONTACT"]:
        bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."); return
    c = message.contact
    users[chat_id]["name"] = f"{c.first_name or ''} {c.last_name or ''}".strip()
    users[chat_id]["phone"] = c.phone_number
    users[chat_id]["contact"] = f"{users[chat_id]['name']} | {users[chat_id]['phone']}"
    finish_and_send(chat_id)

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    chat_id = message.chat.id
    users.setdefault(chat_id, {"photos": []})
    if users[chat_id].get("state") != STATES["PHOTOS"]:
        bot.send_message(chat_id, "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start."); return
    fid = message.photo[-1].file_id
    if len(users[chat_id]["photos"]) < MAX_PHOTOS:
        users[chat_id]["photos"].append(fid)
        left = MAX_PHOTOS - len(users[chat_id]["photos"])
        bot.send_message(chat_id, f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {left}" if left > 0 else f"–ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ.")
    else:
        bot.send_message(chat_id, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {MAX_PHOTOS} —Ñ–æ—Ç–æ.")

@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(message):
    chat_id, text = message.chat.id, message.text.strip()
    if chat_id not in users: reset_user(chat_id)

    if text == BTN_CANCEL or text.lower() in ("/cancel", "cancel"):
        bot.send_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞.",
                         reply_markup=ReplyKeyboardRemove()); reset_user(chat_id); return

    state = users[chat_id].get("state")

    # =================== –õ–û–ì–ò–ö–ê –ü–û –®–ê–ì–ê–ú ===================
    if state == STATES["DEVICE"]:
        if text in DEVICE_TYPES: users[chat_id]["device"] = text; ask_condition(chat_id)
        else: ask_device(chat_id); return

    elif state == STATES["CONDITION"]:
        users[chat_id]["condition"] = None if text == BTN_SKIP else text; ask_specs(chat_id)

    elif state == STATES["SPECS"]:
        users[chat_id]["specs"] = None if text == BTN_SKIP else text; ask_kit(chat_id)

    elif state == STATES["KIT"]:
        users[chat_id]["kit"] = None if text == BTN_SKIP else text; ask_faults(chat_id)

    elif state == STATES["FAULTS"]:
        users[chat_id]["faults"] = None if text == BTN_SKIP else text; ask_photos(chat_id)

    elif state == STATES["PHOTOS"]:
        if text in (BTN_DONE, BTN_SKIP): ask_contact_method(chat_id)
        else: bot.send_message(chat_id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª / ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")

    elif state == STATES["CONTACT_METHOD"]:
        if text in CONTACT_METHODS:
            users[chat_id]["contact_method"] = text
            ask_contact(chat_id)
        elif text == BTN_SKIP:
            users[chat_id]["contact_method"] = None
            finish_and_send(chat_id)

    elif state == STATES["CONTACT"]:
        users[chat_id]["contact"] = text if text != BTN_SKIP else None
        finish_and_send(chat_id)

    else:
        bot.send_message(chat_id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /start.",
                         reply_markup=ReplyKeyboardRemove()); reset_user(chat_id)

# ======================== WEBHOOK ========================

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ webhook!", 200

if __name__ == "__main__":
    if not WEBHOOK_HOST:
        raise RuntimeError("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL!")
    WEBHOOK_URL = f"{WEBHOOK_HOST}/{TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=PORT)